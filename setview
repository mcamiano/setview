#!/bin/bash -l
# Shell script to override the default archive for a new command shell

if test -f ~/.setview 
then
  . ~/.setview   # Environment
fi

SCM=${SCM:-$HOME/bin/git}
STDSOURCETREEROOT=$HOME/workspace
SOURCETREEROOT=${SOURCETREEROOT:-$STDSOURCETREEROOT}
ARCHIVEPATH=$HOME/archived_projects
EDITOR=${EDITOR:-/bin/vi}
SHELLCMD=/bin/bash   # Assumed to be a bash compatible shell
FINDCMD=/usr/bin/find   # Assumed to be a POSIX compatible find
VIEWMAXDEPTH=2
export VIEWMAXDEPTH SCM SOURCETREEROOT ARCHIVEPATH SHELLCMD FINDCMD 

function listarchives()
{
  opts="$1"
  $FINDCMD $ARCHIVEPATH -maxdepth $VIEWMAXDEPTH -mindepth 1  -follow -type d -name .git $opts -not -path */.git/* -exec dirname {} \; |while read name
  do 
    basename $name
  done
}
export -f listarchives

# Shell function to list local views of existing archive projects
function listviews() 
{
  opts="$1"
  if [[ "$opts" = "-l" ]]
  then
    $FINDCMD $SOURCETREEROOT -maxdepth $VIEWMAXDEPTH -mindepth 1  -follow -type d -name .git -not -path */.git/* -exec dirname {} \;
  elif [[ "$opts" = "-m" ]]
  then
    cd $SOURCETREEROOT
    $FINDCMD . -maxdepth $VIEWMAXDEPTH -mindepth 1  -follow -type d -name .git -not -path */.git/* -exec dirname {} \; | while read name
    do
       fpart=$(basename $name)
       dirpart=${name##\./}
       dirpart=${dirpart%%/*}
       echo "$dirpart	~/$fpart"
    done
  else
    $FINDCMD $SOURCETREEROOT -maxdepth $VIEWMAXDEPTH -mindepth 1  -follow -type d -name .git $opts -not -path */.git/* -exec dirname {} \; | while read name 
    do
       basename $name 
    done
  fi
}
export -f listviews

function lcd()
{
  cd ${1:-$VIEWHOME}
}
export -f lcd


function fusage()
{
   echo "$msg"
   /bin/cat <<EOT
   setview: manage and set up a default shell environments for GIT work

   Synopsis: 
      setview { viewname | -v viewname | --view viewname | --viewname viewname } [options]
      setview [-h | --help] 

   Options:
      --exec cmdlist  ...execute the commands under the view and exit
      --pause msg     ...prompt with a message and pause just before exiting

      --archive   ...unstage a repository viewname by moving it from SOURCETREEROOT to ARCHIVEPATH
      --stage     ...stage a repository viewname by moving it from ARCHIVEPATH to SOURCETREEROOT

   Examples:
      setview myview
      setview -v myview

      setview --view myview --exec "git add flarg.cpp"

   When run without arguments, setview prompts interactively for a view name.
   It also prompts if a view name does not uniquely identify a view.

   Environment:
      VIEWMAXDEPTH  ...depth to search view root dir for GIT source trees
                    Source trees are typically nested within customer-specific
		    or project-specific view subdirectories. This variable
		    lets you shorten the searches.

   Notes:
     GIT does not distinguish between archives and source trees. Setview does: A view is a working repo, and an archive is an old view. 
       An archive is the entire local working context for a client project, shoved out of the way. 

     A Setview view is simply a non-bare GIT repository.  
     
     Ideally, views should be emphemeral, created and dropped upon demand.

   Not Yet Implemented:
      --task message  ...branch locally, add all files and commit with the given message automatically upon normal shell exit

   Limitations:
   The --exec option may pose a risk based on your handling of SSH. 
   It is intended for invoking archive commends over a lan or intranet through 
   secured ssh connections. 
  

   This script is meant as a thin layer over git and is not recommended for use in 
   public facing interfaces. 
EOT
}

names="";
editlog=0;
execcmd=0;
cmdstring="";
pause=0;
pausestring=0;
task=0;
while [[ ! -z "$1" ]]
do
   case $1 in
   -h|--help)
      fusage ;
      exit 0;
   ;;
   --debug) 
      export dbg="echo"
   ;;
   -v|--viewname|--view)
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         exit 1;
      else
         export view="$2";
         names=$(listviews "-path $view")
         shift;
      fi
   ;;
   --editlog)
      editlog=1;
   ;;
   --pause)
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         exit 1;
      else
         pause=1
         pausestring="$2";
         shift;
      fi
   ;;
   --exec)
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         exit 1;
      else
         execcmd=1
         cmdstring="$2";
         shift;
      fi
   ;;
   --task)
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         exit 1;
      else
         task=1;
         taskmessage="$2";
         shift;
      fi
   ;;
   --archive)
      if [[ -z "$1" ]]
      then
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         exit 1;
      else
         archive=1;
         shift;
      fi
   ;;
   --stage)
      if [[ -z "$1" ]]
      then
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         exit 1;
      else
         stage=1;
         names=$(listarchives|grep "$view")
         shift;
      fi
   ;;
   --*) # reject unknown args
         echo "$1 missing an argument. Usage: " >&2;
         fusage;
         read yorn
         exit 1;
   ;;
   *) # default to a view name
      view=${1:-.*}
      names=$(listviews|grep "$view")
   ;;
   esac
   shift; # get rid of $1
done


if [[ -z "$names" ]]
then
   echo "No view name specified, or view not found. Looking up views..." >&2;
   names=$(listviews)
fi

num=$(echo $names | wc -w)
if [[ $num -eq 1 ]]
then
   view="$names"
fi

if [[ $num -eq 0 ]]
then
   echo "The view '$view' is not a view for any current archive."
   if [[ $stage == "1" ]]
     echo "Cannot stage because the project cannot be found in $ARCHIVEPATH."
     exit 1
   fi
   echo "Please select from the following:"
   
   select name in  $(find $SOURCETREEROOT -maxdepth $VIEWMAXDEPTH -mindepth 1  -follow -type d -name .git -not -path */.git/* -exec dirname {} \; echo "Quit";)
   do 
      if [[ ! -z "$name" ]]
      then
         view="$name";
         break;
      else
         echo "The selection you made is not an option. Quitting..."
	 exit
      fi
   done
else
  if [[ $num -gt 1 ]]
  then
   echo "Views by the name '$view' exist for multiple archives."
   echo "Please select from the following:"
   select name in  $names "Quit"
   do 
      if [[ ! -z "$name" ]]
      then
         view="$name";
         break;
      else
         echo "The selection you made is not an option. Quitting..."
	 exit 1
      fi
   done
  fi
fi

if [[ "$view" = "Quit" ]]
then
   exit;
fi

if [[ $archive == "1" ]]
then
   /bin/mv -iv ${SOURCETREEROOT}/${view} ${ARCHIVEPATH}
   exit 0
fi
if [[ $stage == "1" ]]
then
   /bin/mv -iv ${ARCHIVEPATH}/${view} ${SOURCETREEROOT}
   exit 0
fi

prompt=$(basename $view)
archname=$(basename $(dirname $view) )
(
   thisarchive="$archname"
   thisview="$prompt"
   thishome="$view"
   VIEWHOME="$view"
   export thisview thisarchive thishome VIEWHOME

   lcd

   # if [[ $task == "1" ]]
   # then
      # branchname="setview_${taskmessage:0:10}_$(date +%H%M_%d%m%y)"
      # branchname=${branchname// /_}
      # $SCM branch ${branchname}
      # trap "$SCM add .; $SCM commit -m \"$(date +%H:%M %d %m %y taskmessage)\"" EXIT
   # fi

   if [[ $execcmd == "0" ]]
   then
      clear
      pwd
      PS1="$prompt: " exec $SHELLCMD -i
   else
      exec $SHELLCMD -c "$cmdstring"
   fi
)
if [[ $pause == "1" ]]
then
   read -p "$pausestring" yorn
fi
