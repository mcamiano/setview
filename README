The files in this package are released under the GNU General Public License, the same as the GNU Arch program. See the file COPYING for details.

Motivation
==========
Setview is intended to help organize local git working trees. 

Setview is a combination of a login shell and conventions for locating repos for archival and working tree purposes.

It also helps decouple the build environments from one another. To improve isolation of environmental state, Setview launches a new login shell as you start an editing session.
The shell can be customized by editing a startup file "~/.setview", which takes Bash commands. 

Setview was originally written to help manage repositories for TLA Arch. Git's command lines are generally less verbose compared to TLA, and this version of Setview is much simpler.
In particular, it does not curry git subcommmands into the shell. Use rtomayko/git-sh on GitHub for that. 


Installing - Prerequisites
==========================

The Setview scripts are totally biased in favor of users of the Bash shell. 
You should be able to get by with small adaptations if you use a similar shell such as ZSH or KSH. Users of CSH-like shells will be disappointed. 

Install GIT: Before you install, you should install GIT and set up the typical configuration (user name, email, etc).

The install process is currently manual. Setview used to have an install script, but it became moot with git.

Installing
----------
Decide where your views will be located. Repos are placed under ~/workspace by default.
Decide where your archived repos will be stored. By default, old repos you are no longer using are left as-is, in the same location as the views, but this may not be optimal.
Edit the Setview script to set the default view and archived repo locations.

Copy the Setview to an executable path (typically ~/bin):
   mkdir ~/bin
   cp setview ~/bin
and update its permissions with   
   chmod u+x ~/bin/setview

Once installed, be sure your path is set up to find the script.


Using
-----

There are few commands with Setview:
   listarchives (shell function)
   listviews (shell function)
   lcd (shell function; cd back to current view home)
   setview (the main script)


setview --help
   setview: manage and set up a default shell environments for GIT work

   Synopsis: 
      setview { viewname | -v viewname | --view viewname | --viewname viewname } [options]
      setview [-h | --help] 

   Options:
      --exec cmdlist  ...execute the commands under the view and exit
      --pause msg     ...prompt with a message and pause just before exiting

      --archive   ...unstage a repository viewname by moving it from SOURCETREEROOT to ARCHIVEPATH
      --stage     ...stage a repository viewname by moving it from ARCHIVEPATH to SOURCETREEROOT

   Examples:
      setview myview
      setview -v myview

      setview --view myview --exec "git add flarg.cpp"

   When run without arguments, setview prompts interactively for a view name.
   It also prompts if a view name does not uniquely identify a view.

   Environment:
      VIEWMAXDEPTH  ...depth to search view root dir for GIT source trees
                    Source trees are typically nested within customer-specific
		    or project-specific view subdirectories. This variable
		    lets you shorten the searches.

   Notes:
     GIT does not distinguish between archives and source trees. Setview does: A view is a working repo, and an archive is an old view. 
       An archive is the entire local working context for a client project, shoved out of the way. 

     A Setview view is simply a non-bare GIT repository.  
     
     Ideally, views should be emphemeral, created and dropped upon demand.

   Not Yet Implemented:
      --task message  ...branch locally, add all files and commit with the given message automatically upon normal shell exit

   Limitations:
   The --exec option may pose a risk based on your handling of SSH. 
   It is intended for invoking archive commends over a lan or intranet through 
   secured ssh connections. 
  

   This script is meant as a thin layer over git and is not recommended for use in 
   public facing interfaces. 


Roadmap
=======
Setview has been dormant for quite a while, but the general goal is to compartmentalize working contexts. 

These are basically done by setview and/or git:
* repos should be duplicatable and accessed as parallel views of the same repo
* it should be harder to accidentally damage a working tree and lose the whole local repo
* the shell should know something about the view you are in, enough to help navigate, search, etc
* working trees should be garbage-collectible; that is, I want a pristine working environment before and after no matter how much mucking about I do with cloning or making spurious files. 

This is an idea that I've had since it started, but have never really approached:
* the process space and the filesystem space should be completely isolated in its own virtualized environment that starts when you open the view, can be suspended, and is garbage collected when you kill the view.
