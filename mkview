#!/bin/bash
# Shell script to create a source tree, which will act as a local view into an existing archive project
# To avoid a security hole, this script embeds the location of the tla program
# See below to change the location
. ${0%/*}/ENV.setview   # Environment

export GIT=${GIT:-$HOME/bin/tla}
export STDSOURCETREEROOT=${HOME}/{views}
export SOURCETREEROOT=${SOURCETREEROOT:-$STDSOURCETREEROOT}
export GIT SOURCETREEROOT

function fusage()
{
   echo "$msg"
   /bin/cat <<EOT
   mkview: create an editable source tree image of an Arch archive project version
   Synopsis:
      mkview [ [-h | --help] | [-a archive [ -c category [-v view ] ] -i ] 
      mkview [options except -v] --baseline

      archive and category can be wildcarded with '?' to provide pick lists

   Examples:
      mkview -h
      ... Invokes this help screen

      mkview -a foo@bar.com--2005-myarchive -c hello-world
      mkview -a foo@bar.com--2005-myarchive -c hello-world--mainline--0.1
      ... Creates view '$SOURCETREEROOT/myarchive/hello-world'

      mkview -a foo@bar.com--2005-myarchive -c hello-world -v hello
      ... Creates a view named '$SOURCETREEROOT/myarchive/hello'

      mkview -a '?' -c '?' -v mynewview
      ... Causes lists to be displayed for archive and category, and creates
      a view named '$SOURCETREEROOT/<selectedarchive>/mynewview'

      mkview -a 'foo@bar.com--2004-myarchive'
      ... When no project category is specified, mkview creates the base
      part of the view directory corresponding to the archive, but does 
      not invoke init-tree.

      mkview -a '?' -c '?' --baseline
      ... Queries for an archive and category, then sets up the current
      directory to be associated with that archive and category.


   Options:
      -a | -A | --archive
         ... Names the archive. Takes one argument. Required. 
	 If the argument is a '?' or does not uniquely identify an archive,
	 a pick list is displayed.

      --baseline 
         ... Sets up the current working directory as the view.
         Does nothing if the current directory is already a source tree.
         Mutually exclusive of options -g and -v.
         You have to import or commit sources manually using importbaseline.

      -c | -p | --category | --version | --project
         ... Names the project-category-version. Takes one argument. Optional. 
	 If omitted, only the base directory for the view will be created.
	 If the argument is a '?' or does not uniquely identify a version, 
	 a pick list is displayed.

      --debug
         ... prevents the script from really doing anything 

      -g | --get
         ... Retrieve the source tree from the archive.
	 If the -c option is omitted, this option is ignored.

      -h | --help
         ... A help message. Optional.

      -v | --viewname | --view
         ... Names the view. Takes one argument. Optional. 
	 If the -v option is omitted and the -c option is present, 
	 the view name will default to the category.

   Environment:
      mkview uses the following shell variables which may be overridden 
      by the environment:
      
      GIT   ... the path and name of the tla executable file
         - if no global setting is configured, defaults to "$HOME/bin/tla"

      SOURCETREEROOT   ... a base directory for project source trees
         - if no global setting is configured, defaults to "$HOME/{views}"

   Notes:
      Arguments to -a and -c are passed to 'grep', so it is possible to 
      use wildcarded regexp expressions for -a archive and -c category. 
      This has not been well tested (shell side effects may occurr).

      mkview works well when archive/category corresponds to customer/project
      or to another isomorphic mapping. 

      Running mkview against remote archives has not been tested and
      will probably give poor performance.
EOT
}

viewname="";
archive="";
category="";
explicitcategory=0;
getsource=0;
dbg="";
version="";
baseline=0;
export viewname archive category explicitcategory getsource dbg version baseline

while [[ ! -z "$1" ]]
do
   case $1 in
   "-h"|"--help")
      fusage ;
      exit 0;
   ;;
   "--debug") export dbg="echo"
   ;;
   "-g"|"--get") export getsource="1"
   ;;
   "-v"|"--viewname"|"--view")
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: $1 viewname" >&2;
         exit 1;
      else
         viewname="$2"
         shift;
      fi
   ;;
   "-a"|"-A"|"--archive")
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: $1 viewname" >&2;
         exit 1;
      else
         archive="$2";
         shift;
      fi
   ;;
   "--baseline") export baseline="1";
   ;;
   "-c"|"-p"|"--category"|"--version"|"--project")
      if [[ -z "$2" ]]
      then
         echo "$1 missing an argument. Usage: $1 viewname" >&2; 
         exit 1;
      else
         category="$2";
	 explicitcategory=1;
         shift;
      fi
   ;;
   esac
   shift; # get rid of $1
done

# Defaults or selectable arguments
# can select an archive and/or a category
if [[ -z "$archive" ]]
then
   fusage "Error: Archive name missing." >&2;
   exit 1;
fi

declare -a archivelist;
if [[ "$archive" = "?" ]]
then
   archivelist=( $($GIT archives --names ) );
else
   archivelist=( $($GIT archives --names |grep -- "$archive" |grep -v -- '-MIRROR$' ) );
fi

if [[ "$archive" = "?" || ${#archivelist[@]} -ne 1 ]]
then
   echo "Please choose one of the following archives:";
   select name in $(echo ${archivelist[@]}; echo "Quit")
   do 
      if [[ ! -z "$name" ]]
      then
         archive="$name";
         break;
      else
         echo "The selection you made is not an option. Quitting..." >&2;
         exit 1;
      fi
   done
else
   archive=${archivelist[0]};
fi
if [[ "$archive" = "Quit" ]]
then
   exit 0;
fi
archive=${archive##-*};

declare -a versionlist;
if [[ "$category" = "?" ]]
then
   versionlist=( $($GIT categories -A $archive 2>&1|while read cat; do $GIT branches -A $archive $cat 2>&1 ; done | while read branch; do $GIT versions -A $archive $branch 2>&1; done ) );
else
   versionlist=( $($GIT categories -A $archive 2>&1|while read cat; do $GIT branches -A $archive $cat 2>&1 ; done | while read branch; do $GIT versions -A $archive $branch 2>&1; done |grep -- "$category"| grep -v -- 'MIRROR$') );
fi

	# set the version to a user selection
if [[ "$category" = "?" || ( ($explicitcategory = 1 ) && ${#versionlist[@]} -gt 1 ) ]]
then
   echo "Please choose one of the following category-versions:";
   select cname in $(echo ${versionlist[@]}; echo "Quit")
   do 
      if [[ ! -z "$cname" ]]
      then
         version="$cname";
         break;
      else
         echo "The selection you made is not an option. Quitting..." >&2;
         exit 1;
      fi
   done
else
	# set the version to the singleton returned
   if [[ ! -z "$category" ]]
   then
      version=${versionlist[0]};
   fi
fi

if [[ "$version" = "Quit" ]]   # if user decided not to chose, bail out
then
   exit 0;
fi

# take the last fragment of the archive as the local view directory
viewhomedir=${archive##*-};

if [[ "$baseline" -eq 1 ]]
then
   if [[ ! -d {arch} ]]
   then
      $dbg $GIT init-tree "$archive/$version"
   fi
   
else
   # if category is set, create and initialize view directory
   if [[ "$explicitcategory" -eq 1 ]]
   then
      # Provide secondary defaults
      if [[ -z "$viewname" ]]   # if viewname not explicitly stated, default to category name
      then
         viewname=${version%%--*};
      fi

         # Don't overwrite existing view directories
      if [[ ! -d $SOURCETREEROOT/$viewhomedir/$viewname ]]
      then
         $dbg mkdir -p "$SOURCETREEROOT/$viewhomedir/$viewname";
         echo "Created $SOURCETREEROOT/$viewhomedir/$viewname";
         if [[ "$getsource" -eq 1 ]]
         then
            $dbg $GIT get -s -A "$archive" "$version" "$SOURCETREEROOT/$viewhomedir/$viewname" 
	    if [[ $? -ne 0 ]]
	    then
               echo "Could not retrieve project source. Sorry!" >&2;
	    else
               echo "Get $viewhomedir/$viewname $archive/$version";
            fi
         else
            $dbg $GIT init-tree -d "$SOURCETREEROOT/$viewhomedir/$viewname" "$archive/$version";
	    if [[ $? -ne 0 ]]
	    then
               echo "Could not initialize project tree. Sorry!" >&2;
	    else
               echo "Init-tree $viewhomedir/$viewname $archive/$version";
            fi
         fi
      else
         echo "View '$viewhomedir/$viewname' already exists.";
      fi

   else # if category not set, just create the directory

         # Don't overwrite existing view directories
      if [[ ! -d $SOURCETREEROOT/$viewhomedir/$viewname ]]
      then
         $dbg mkdir -p "$SOURCETREEROOT/$viewhomedir/$viewname";
         echo "Created $SOURCETREEROOT/$viewhomedir/$viewname";
      else
         echo "View '$viewhomedir/$viewname' already exists.";
      fi
   fi
fi
